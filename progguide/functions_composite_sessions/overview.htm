<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
      <title>Composite Sessions overview</title>
      <link rel="stylesheet" type="text/css" href="../../skin/General.css">
      <link rel="stylesheet" type="text/css" href="../../skin/MSHtmlHelp.css">
      <meta name="keywords" content="Composite Sessions ">
      <meta name="author" content="Infor">
      <meta name="ROBOTS" content="ALL">
   </head>
   <body id="body">
      <div class="TopicTitle">Composite Sessions overview</div>
      <div class="body">
         <div class="GeneralSection">
            <p class="Paragraph">Composite Sessions is a UI pattern through which more than one 
               session can be shown, side-by-side, in one frame. These sessions are started and stopped by one user action.
               From an end-user perspective, a composite session behaves as one session.
               The composite nature is an implementation detail of which the end-user should not be aware.
            </p>
            <p class="Paragraph">Technically a composite session consists of one controller session and 2, 3 or 4 child sessions. These child sessions 
               can be synchronized (so related data is shown) and drag and drop operations between these child sessions can be implemented.
            </p>
         </div>
         <div class="GeneralSection">
            <div class="subSectionTitle">Restrictions</div>
            <p class="Paragraph">Below a number of important restrictions for composite sessions are listed.</p>
            <ul class="List">
               <li class="ListItem">Composite sessions can only be used in the ERP Enterprise Web UI (so not in Worktop/BW)</li>
               <li class="ListItem">A composite child session must be a read-only session or an editable overview session.</li>
               <li class="ListItem">A composite child session may be a plain 4GL-Session a Document Viewer or a standalone GBF session 
                  (so not a GBF session running as a DLL inside a 4GL-Session, not a Multi-Main-Table session and not a programmable dialog
                  based session)
               </li>
               <li class="ListItem">A composite child session may not use dynamic index switching (causing under the hood the session to be replaced by a new
                  instance of the same session)
               </li>
               <li class="ListItem">Keyboard commands are sent to the child session which has the focus and not to the other child sessions within the same composite.</li>
               <li class="ListItem">When the user changes the splitter positions, these settings are not saved. So a composite session always starts with the
                  default splitter positions
               </li>
            </ul>
         </div>
         <div class="GeneralSection">
            <div class="subSectionTitle">Composite Session Layout</div>
            <p class="Paragraph">The Composite Controller is responsible for defining the composite session layout. It can do so by defining so-called split
               panes.
               Each split pane divides its container in two half's, divided by a splitter bar.
               The splitter bar can have a horizontal orientation or a vertical orientation.
               To each of the split pane half's either a child session or a new split pane can be added. 
               In the next figure an example is shown of a composite session.
            </p>
            <div class="Figure"><img src="../images/composite_session.gif" alt="[...]" height="594" width="546"></div>
            <p class="Paragraph">In this example, the first split pane divides the composite session with a vertical splitter into two half's.
               The second split pane divides the left-half of the first split pane with a horizontal splitter into two half's.
               The top-half of pane 2 is occupied by "child 1" and the bottom-half of pane 2 is occupied by "child 2".
               The right side of pane 1 is occupied by "child 3" (a GBF session).
            </p>
         </div>
         <div class="GeneralSection">
            <div class="subSectionTitle">Composite Session Characteristics</div>
            <p class="Paragraph">Some general characteristics of Composite Sessions are:</p>
            <ul class="List">
               <li class="ListItem">There is always one Controller session</li>
               <li class="ListItem">A Composite session contains 2, 3 or 4 child sessions</li>
               <li class="ListItem">The child sessions are rendered in 1, 2 or 3 split panes</li>
            </ul>
            <p class="Paragraph">Some characteristics of a Composite Controller Session are:</p>
            <ul class="List">
               <li class="ListItem">To a controller session a script of type: "3GL (Without 4GL Engine)" must be linked. 
                  This script must include the file &lt;bic_cps&gt;
               </li>
               <li class="ListItem">The Controller session defines the initial splitter positions</li>
               <li class="ListItem">The Controller session always has a title bar and a status bar</li>
               <li class="ListItem">The Controller session controls the lifecycle of all child sessions
                  (So any File--&gt;Close command in a child session is always handled by the Controller session)
               </li>
            </ul>
            <p class="Paragraph">Some characteristics of a Composite Child Session are:</p>
            <ul class="List">
               <li class="ListItem">Each Child session may optionally show a Title bar, Menu bar a standard toolbar and an application toolbar. 
                  Whether or not these components are shown is set in the Controller
               </li>
               <li class="ListItem">A session script can use function <a href="../../progguide/functions_composite_sessions/is.composite.child.htm" class="manualLink">is.composite.child()</a> to determine whether it is running in a composite session context
               </li>
               <li class="ListItem">The standard items shown in the menu bar and toolbar depend on the session type.
                  It makes no difference whether or not the session is run as a composite child.
               </li>
               <li class="ListItem">The session script can permanently disable certain standard commands when running in the context of a composite session
                  by calling <a href="../../progguide/functions_form_and_form_field_operations/standard.commands.off.htm" class="manualLink">standard.commands.off()</a></li>
               <li class="ListItem">The session script can hide certain form commands when running in the context of a composite session
                  by calling <a href="../../progguide/functions_form_and_form_field_operations/remove.form.commands.htm" class="manualLink">remove.form.commands()</a></li>
            </ul>
         </div>
         <div class="GeneralSection">
            <div class="subSectionTitle">Implicit saves in composite sessions</div>
            <p class="Paragraph">When a Composite session consists of one or more editable 4GL-child sessions, an implicit save is done in the child session
               as soon as 
               the focus moves from this child session to another composite child session.
               For instance when a user updates a field in a composite child session and then invokes a command in another composite child
               session,
               before this command is executed, a save of pending updates is done in the first composite child.
               	  This concept is similar to the concept implemented in MMT sessions
            </p>
         </div>
         <div class="GeneralSection">
            <div class="subSectionTitle">Data synchronization in a composite session</div>
            <p class="Paragraph">Data synchronization between child sessions within a composite session is not provided by the tools but
               must be programmed in the application script. For example synchronization from a 4GL-multi-occurrence session to a
               GBF session can be setup as follows:
            </p>
            <ul class="List">
               <li class="ListItem">4GL-Section <i class="Emphasis">choice.mark.occur:</i>, <i class="Emphasis">after.choice:</i> can be used to 
                  signal that another record has been selected (check if key fields differ from previous mark.occur).
                  From this 4GL-Section call <a href="../../progguide/functions_prcm/prcm.notify.htm" class="manualLink">prcm.notify()</a>, passing an XML node containing the key
                  fields with their current values of the currently selected record.
               </li>
               <li class="ListItem">In the GBF session during startup register for specific prcm messages by calling <a href="../../progguide/functions_prcm/prcm.register.htm" class="manualLink">prcm.register()</a></li>
               <li class="ListItem">In the GBF callback function <a href="../../progguide/functions_generic_browser_frameworkf/gbf.bms.received.htm" class="manualLink">gbf.bms.received()</a> handle the received prcm notification.
               </li>
               <li class="ListItem">Some helper functions are available to store and retrieve the key fields of a table in an XML object. These functions
                  are described <a href="../../progguide/functions_keyfields/overview.htm" class="manualLink">Key fields Object overview</a>.
               </li>
            </ul>
         </div>
         <div class="GeneralSection">
            <div class="subSectionTitle">Drag and drop in a composite session</div>
            <p class="Paragraph">For Composite Child Sessions, support for drag and drop operations can be created.
               	Below a table of possible combinations is shown
            </p>
            <table width="100%" border="1" class="default">
               <tbody noTR="5" class="default">
                  <tr no="1" isLast="false" class="default">
                     <th rowspan="1" colspan="1" class="default">Drag Source</th>
                     <th rowspan="1" colspan="1" class="default">Drop Target</th>
                  </tr>
                  <tr no="2" isLast="false" class="default">
                     <td rowspan="1" colspan="1" class="default">4GL Multi-occ. Session</td>
                     <td rowspan="1" colspan="1" class="default">4GL Multi-occ. Session</td>
                  </tr>
                  <tr no="3" isLast="false" class="default">
                     <td rowspan="1" colspan="1" class="default">4GL Multi-occ. Session</td>
                     <td rowspan="1" colspan="1" class="default">GBF Session</td>
                  </tr>
                  <tr no="4" isLast="false" class="default">
                     <td rowspan="1" colspan="1" class="default">GBF Session</td>
                     <td rowspan="1" colspan="1" class="default">4GL Multi-occ. Session</td>
                  </tr>
                  <tr no="5" isLast="true" class="default">
                     <td rowspan="1" colspan="1" class="default">GBF Session</td>
                     <td rowspan="1" colspan="1" class="default">GBF Session</td>
                  </tr>
               </tbody>
            </table>
            <p class="postspacer">&nbsp;</p>
            <p class="Paragraph">The implementation of this feature is based on the following design decisions</p>
            <ul class="List">
               <li class="ListItem">A session can only become a Drop source when a specific call is done in the application script during session startup
                  		 (see <a href="../../progguide/functions_composite_sessions/enable.drag.htm" class="manualLink">enable.drag()</a> and <a href="../../progguide/functions_generic_browser_frameworkf/gbf.init.htm" class="manualLink">gbf.init()</a>)
               </li>
               <li class="ListItem">A session can only become a Drop target for specific objects when a specific call is done in the application during 
                  		session startup (see <a href="../../progguide/functions_composite_sessions/enable.drop.htm" class="manualLink">enable.drop()</a> and <a href="../../progguide/functions_generic_browser_frameworkf/gbf.enable.drop.htm" class="manualLink">gbf.enable.drop()</a>)
               </li>
               <li class="ListItem">A GBF session cannot differentiate on beforehand which GBF nodes are valid drag objects or drop targets. 
                  		So the whole GBF tree is enabled or disabled for drag/drop. 
                  		When the user performs a drag/drop operation for a node type which is not permitted, the GBF application can
                  		abort the operation with an error message. This approach is similar to the behavior of the drag/drop feature within a GBF
                  tree.
               </li>
               <li class="ListItem">Session codes are used as an identifier for the type of objects which can be accepted by a drop target</li>
               <li class="ListItem">During a drag/drop operation a data exchange is done between two sessions. 
                  		The data exchange is standardized and based on the Key fields object which is described <a href="../../progguide/functions_keyfields/overview.htm" class="manualLink">Key fields Object overview</a></li>
               <li class="ListItem">The business logic related to a drag/drop operation must be implemented in the application script of the session which
                  		acts as the drop target
               </li>
            </ul>
         </div>
         <div class="GeneralSection">
            <div class="subSectionTitle">Personalization and Composite Sessions</div>
            <p class="Paragraph">Personalization of the Composite Controller Session is not possible.</p>
            <p class="Paragraph">Personalization and conditional formatting data for Composite Child Sessions is possible and is stored in a separate context.
               When a Composite Child Session can both be run standalone and also in the context of a Composite session, the personalization
               and 
               conditional formatting data for these contexts is not shared. 
               When the same composite child session is used in more than one composite controller session, the personalization and 
               conditional formatting data is shared. So personalization changes made in the context of one composite session is 
               also visible when this same child session is used in the context of another composite session
            </p>
         </div>
         <div class="RelatedTopics">
            <p class="RelatedTopicsSectionTitle">Related topics</p>
            <ul>
               <li class="RelTopic"><a href="../../progguide/functions_composite_sessions/synopsis.htm" class="manualLink">Composite Sessions synopsis</a></li>
               <li class="RelTopic"><a href="../../progguide/functions_composite_sessions/examples.htm" class="manualLink">Composite Sessions Code Examples</a></li>
               <li class="RelTopic"><a href="../../progguide/functions_keyfields/overview.htm" class="manualLink">Key fields Object overview</a></li>
            </ul>
         </div>
         <p>&nbsp;</p>
         <table class="noborder" border="0" cellpadding="0" cellspacing="5">
            <tr>
               <td class="noborder"><img src="../../skin/mail.gif" alt="Send Us Your Feedback About this Help Page"></td>
               <td class="noborder"><a class="FeedbackLink" href="mailto:documentation@infor.com?Subject=Feedback on /progguide/functions_composite_sessions/overview, 10.4.2, en">Send Us Your Feedback About this Help Page</a></td>
            </tr>
         </table>
      </div>
   </body>
</html>