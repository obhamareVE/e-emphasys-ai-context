<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
      <title>Cipher Functions overview</title>
      <link rel="stylesheet" type="text/css" href="../../skin/General.css">
      <link rel="stylesheet" type="text/css" href="../../skin/MSHtmlHelp.css">
      <meta name="keywords" content="cipher functions ">
      <meta name="author" content="Infor">
      <meta name="ROBOTS" content="ALL">
   </head>
   <body id="body">
      <div class="TopicTitle">Cipher Functions overview</div>
      <div class="body">
         <div class="GeneralSection">
            <p class="Paragraph">The Bshell provides access to cipher functions (encryption/decryption) of the OpenSSL
               library, which makes industry standard implementations of these cipher functions available to 3GL programs.
            </p>
            <p class="Paragraph">These functions are availabe from <a href="../../progguide/tiv/tiv_overview.htm" class="manualLink">Tools Interface Version (TIV)</a> 2000.
            </p>
            <p class="Paragraph">The provided ciphers are:</p>
            <ul class="List">
               <li class="ListItem">CIPHER_AES_128_ECB</li>
               <li class="ListItem">CIPHER_AES_128_CBC</li>
               <li class="ListItem">CIPHER_AES_128_CFB1</li>
               <li class="ListItem">CIPHER_AES_128_CFB8</li>
               <li class="ListItem">CIPHER_AES_128_CFB128</li>
               <li class="ListItem">CIPHER_AES_128_OFB</li>
               <li class="ListItem">CIPHER_AES_128_CTR</li>
               <li class="ListItem">CIPHER_AES_128_XTS</li>
               <li class="ListItem">CIPHER_AES_192_ECB</li>
               <li class="ListItem">CIPHER_AES_192_CBC</li>
               <li class="ListItem">CIPHER_AES_192_CFB1</li>
               <li class="ListItem">CIPHER_AES_192_CFB8</li>
               <li class="ListItem">CIPHER_AES_192_CFB128</li>
               <li class="ListItem">CIPHER_AES_192_OFB</li>
               <li class="ListItem">CIPHER_AES_192_CTR</li>
               <li class="ListItem">CIPHER_AES_256_ECB</li>
               <li class="ListItem">CIPHER_AES_256_CBC</li>
               <li class="ListItem">CIPHER_AES_256_CFB1</li>
               <li class="ListItem">CIPHER_AES_256_CFB8</li>
               <li class="ListItem">CIPHER_AES_256_CFB128</li>
               <li class="ListItem">CIPHER_AES_256_OFB</li>
               <li class="ListItem">CIPHER_AES_256_CTR</li>
               <li class="ListItem">CIPHER_AES_256_XTS</li>
            </ul>
            <p class="Paragraph">Basically, this is AES (Advanced Encryption Standard) in 128, 192 and 256 bit blocks with various
               modes such as ECB (Electronic Code Book), CBC (Cipher Block Chaining), CFB (Cipher Feedback) and various others.
            </p>
            <p class="Paragraph">For each algorithm, there is an <i class="Emphasis">initialize</i> function to select that algorithm for
               either an encryption or decryption operation, see <a href="../../progguide/functions_cipher/cipher.encrypt.initialize.htm" class="manualLink">cipher.encrypt.initialize()</a> and <a href="../../progguide/functions_cipher/cipher.decrypt.initialize.htm" class="manualLink">cipher.decrypt.initialize()</a>.
            </p>
            <p class="Paragraph">After initialization, an <i class="Emphasis">update</i> function is called to pass
               the data to encrypt or decrypt.
            </p>
            <p class="Paragraph">Lastly, a <i class="Emphasis">finalize</i> function is called to retrieve the last (partial) block and to free
               the resources used by the operation.
            </p>
            <div class="subExampleSection">
               <div class="subSectionTitle">For example, to encrypt a bit of data:</div><pre class="CodeBlock">
 string input_buf(1024)
 string output_buf(1024)
 string tail(1024), answer(2048)
 string cipher_key(64)
 string iv(32)
 long id1, output_len, tail_len
 
 input_buf = "The text that needs to be encrypted, any length"
 hex_to_raw("67c7e4530f67a4112b678b737a82017f", cipher_key) | Create 16 bytes of key
 hex_to_raw("0123456789abcdef0123456789abcdef", iv) | Create Initialization Vector
 id1 = cipher.encrypt.initialize(CIPHER_AES_128_CFB1, cipher_key, iv)
 cipher.encrypt.update(id1, output_buf, output_len, input_buf))
 cipher.encrypt.finalize(id1, tail, tail_len))

 | append two binary strings to obtain the encrypted data
 answer = substring(output_buf,1,output_len) &amp; substring(tail,1,tail_len) 
 crylen = output_len + tail_len | Length of encrypted data
</pre></div>
            <p class="Paragraph">The cipher function requires that the key and initialization vector are passed
               as binary data. The hex_to_raw and raw_to_hex functions are used as example functions that
               translate between hexadecimal strings and binary data.
            </p>
            <p class="Paragraph">The <i class="Emphasis">answer</i> string is the concatenation of the <i class="Emphasis">output_buf</i> and
               the <i class="Emphasis">tail</i>, this is because many cipher function can only operate on
               blocks of data of a certain internal block length. If the input data is not a multiple of
               that length, it is padded internally, but there can be a final partial block that is returned
               by the <i class="Emphasis">finalize</i> function.
            </p>
            <p class="Paragraph">To decrypt data, the same key, initialization vector and ecrypted data is fed to
               the <i class="Emphasis">decrypt</i> functions.
            </p>
            <div class="subExampleSection">
               <div class="subSectionTitle">Example:</div><pre class="CodeBlock">
 long id2
 string decrypt_buf(2048)
 set.mem(output_buf,chr$(0),1024)
 set.mem(tail,chr$(0),1024)
 set.mem(answer,chr$(0),2048)

 id2 = cipher.decrypt.initialize(CIPHER_AES_128_CFB1,cipher_key,iv)
 | Feed the encrypted data (in answer) and the proper length to the update function
 cipher.decrypt.update(id2, output_buf, output_len, answer, crylen)
 cipher.decrypt.finalize(id2, tail, tail_len)
 answer = substring(output_buf,1,output_len) &amp; substring(tail,1,tail_len)
 | The "answer" string is now decrypted and equal to the original "input_buf" string
</pre></div>
            <p class="Paragraph">Note the set.mem() calls to clear buffers, which are required because the
               strings are treated as binary chunks of data by the cipher functions.
            </p>
         </div>
         <div class="RelatedTopics">
            <p class="RelatedTopicsSectionTitle">Related topics</p>
            <ul>
               <li class="RelTopic"><a href="../../progguide/functions_cipher/cipher_synopsis.htm" class="manualLink">Cipher Function synopsis</a></li>
               <li class="RelTopic"><a href="../../progguide/functions_digest/digest_overview.htm" class="manualLink">Secure Digest Functions overview</a></li>
            </ul>
         </div>
         <p>&nbsp;</p>
         <table class="noborder" border="0" cellpadding="0" cellspacing="5">
            <tr>
               <td class="noborder"><img src="../../skin/mail.gif" alt="Send Us Your Feedback About this Help Page"></td>
               <td class="noborder"><a class="FeedbackLink" href="mailto:documentation@infor.com?Subject=Feedback on /progguide/functions_cipher/cipher_overview, 10.4.2, en">Send Us Your Feedback About this Help Page</a></td>
            </tr>
         </table>
      </div>
   </body>
</html>