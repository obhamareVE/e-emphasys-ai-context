<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
      <title>alloc.mem()</title>
      <link rel="stylesheet" type="text/css" href="../../skin/General.css">
      <link rel="stylesheet" type="text/css" href="../../skin/MSHtmlHelp.css">
      <meta name="keywords" content="alloc.mem alloc.mem functions alloc.mem ">
      <meta name="author" content="Infor">
      <meta name="ROBOTS" content="ALL">
   </head>
   <body id="body">
      <div class="TopicTitle">alloc.mem()</div>
      <div class="body">
         <div class="GeneralSection">
            <div class="subSectionTitle">Syntax:</div>
            <p class="Paragraph"><code>function&nbsp;long &nbsp;alloc.mem&nbsp;
					(ref&nbsp;variable, long&nbsp;dimension1 [, long&nbsp;dimension2, ...])</code></p>
         </div>
         <div class="GeneralSection">
            <div class="subSectionTitle">Description</div>
            <p class="Paragraph">
               <p class="Paragraph">This allocates memory space to the specified variable at
                  run time. The variable can be a
                  string or an array (of any type). It must be declared as
                  BASED. With multi-dimensional arrays, each dimension must be
                  initialized to 1 at declaration. Once <i class="Emphasis">alloc.mem()</i> has allocated memory for a variable, that
                  variable behaves in the same way as any other variable.
               </p>
               <p class="Paragraph"><i class="Emphasis">Behavior when TIV level of object is below 1700</i></p>
               <p class="Paragraph">When you call <i class="Emphasis">alloc.mem()</i> a second time for the same variable,
                  information already present is retained, but the variable is
                  reallocated to a different part of memory. This is relevant
                  only if you want to increase or decrease the memory space
                  assigned to an array. Because the contents of array elements
                  are contiguous in memory, you can change only the number of
                  elements in the array (the first index in the case of longs
                  and doubles; the second index in the case of strings).
                  Changing the size of array elements during reallocation
                  causes loss of information.
               </p>
               <p class="Paragraph"><i class="Emphasis">Behavior when TIV level of object is 1700 or higher</i></p>
               <p class="Paragraph">When you call alloc.mem() a second time for the same variable, information 
                  	      already present is retained, but the variable may be reallocated to a 
                  	      different part of memory, if one of the dimensions is different from the 
                  	      first time. The information in the array is retained in such a way that 
                  	      when an item is available at a certain point (identified by a number of 
                  	      indices) in the old array, that item can be found at the same point in 
                  	      the new array, when the dimensions of the new array allow. All points 
                  	      in the new array that have no corresponding point in the old array will have a 0 or empty value.
               </p>
               <p class="Paragraph">For backward compatibility the function alloc.mem.deprecated() is available
                  	      from TIV 1700. Regardless the object TIV the alloc.mem.deprecated() function 
                  	      behaves the same as alloc.mem() when the object TIV is less than 1700.
               </p>
            </p>
         </div>
         <div class="GeneralSection">
            <div class="subSectionTitle">Arguments</div>
            <table border="0" class="none">
               <tbody noTR="3" class="none">
                  <tr no="1" isLast="false" class="none">
                     <td class="none">ref</td>
                     <td class="none"><code>variable</code></td>
                     <td class="none"></td>
                  </tr>
                  <tr no="2" isLast="false" class="none">
                     <td class="none">long</td>
                     <td class="none"><code>dimension1</code></td>
                     <td class="none"></td>
                  </tr>
                  <tr no="3" isLast="true" class="none">
                     <td class="none">[long</td>
                     <td class="none"><code>dimension2, ...</code>]
                     </td>
                     <td class="none"></td>
                  </tr>
               </tbody>
            </table>
            <p class="postspacer">&nbsp;</p>
         </div>
         <div class="GeneralSection">
            <div class="subSectionTitle">Return values</div>
            <p class="Paragraph">0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; success</p>
            <p class="Paragraph">-1&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; insufficient memory available</p>
         </div>
         <div class="GeneralSection">
            <div class="subSectionTitle">Context</div>
            <p class="Paragraph">This function is implemented in the 
               			porting set
               			and can be used in 
               			all
               			script types.
            </p>
         </div>
         <div class="Note">
            <div class="NoteSectionTitle"><strong class="GUIRef">Note</strong></div>
            <div class="NoteContent">
               <p class="Paragraph">Remember to use <a href="../../progguide/functions_memory_operations/free.mem.htm" class="manualLink">free.mem()</a> to deallocate memory
                  space when it is no longer required.
               </p>
            </div>
         </div>
         <div class="ExampleSection">
            <div class="subSectionTitle">Example</div><pre class="CodeBlock">
long     i, j, k
string   c(1)     based
string   st(1,1)  based
double   d(1,1,1) based

alloc.mem(c, 10)        | Allocate a string with length 10
alloc.mem(st, 20, 5)    | Allocate 5 strings of length 20
alloc.mem(d, 2, 5, 6)   | Allocate an array of doubles with 3 dimensions
for i=1 to 2
        for j=1 to 5
                for k=1 to 6
                        d(i,j,k) = k*j
                endfor
        endfor
endfor

alloc.mem(d, 4, 5, 6)   | Reallocate array of doubles
alloc.mem(st, 20, 8)    | Reallocate 8 strings
</pre></div>
         <div class="ExampleSection">
            <div class="subSectionTitle">Example when object TIV is 1700 or higher</div><pre class="CodeBlock">
long array(1,1) based

alloc.mem(array, 2, 3 )

array(1,1) = 11
array(1,2) = 12
array(1,3) = 13
array(2,1) = 21
array(2,2) = 22
array(2,3) = 23

alloc.mem( array, 3, 2 )

| The array will have the following contents:
| array(1,1) = 11
| array(1,2) = 12
| array(2,1) = 21
| array(2,2) = 22
| array(3,1) = 0
| array(3,2) = 0 </pre></div>
         <div class="RelatedTopics">
            <p class="RelatedTopicsSectionTitle">Related topics</p>
            <ul>
               <li class="RelTopic"><a href="../../progguide/functions_memory_operations/overview_and_synopsis.htm" class="manualLink">Memory operations overview and synopsis</a></li>
            </ul>
         </div>
         <p>&nbsp;</p>
         <table class="noborder" border="0" cellpadding="0" cellspacing="5">
            <tr>
               <td class="noborder"><img src="../../skin/mail.gif" alt="Send Us Your Feedback About this Help Page"></td>
               <td class="noborder"><a class="FeedbackLink" href="mailto:documentation@infor.com?Subject=Feedback on /progguide/functions_memory_operations/alloc.mem, 10.4.2, en">Send Us Your Feedback About this Help Page</a></td>
            </tr>
         </table>
      </div>
   </body>
</html>