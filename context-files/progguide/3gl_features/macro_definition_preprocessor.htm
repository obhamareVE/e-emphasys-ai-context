<!DOCTYPE html
  PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en">
   <head>
      <meta http-equiv="Content-Type" content="text/html; charset=windows-1252">
      <title>Macro definition (preprocessor)</title>
      <link rel="stylesheet" type="text/css" href="../../skin/General.css">
      <link rel="stylesheet" type="text/css" href="../../skin/MSHtmlHelp.css">
      <meta name="keywords" content="macro definition (preprocessor) ">
      <meta name="author" content="Infor">
      <meta name="ROBOTS" content="ALL">
   </head>
   <body id="body">
      <div class="TopicTitle">Macro definition (preprocessor)</div>
      <div class="body">
         <div class="GeneralSection">
            <p class="Paragraph">Use the following statement to define a macro:</p><pre class="CodeBlock">
#define macroname[(arguments)]
</pre><p class="Paragraph">Use the folowing statement to undefine a macro:</p><pre class="CodeBlock">
#undef macroname[(arguments)]
</pre></div>
         <div class="GeneralSection">
            <div class="subSectionTitle">Defining macros</div>
            <p class="Paragraph">The macro names in the source are expanded to the macro
               definition. If a macro definition does not fit on one line,
               it is possible to continue the definition on the next line(s)
               by using the caret symbol '^' at the beginning of each line.
               It is possible to use arguments in the macro. For
               example:
            </p><pre class="CodeBlock">
#define a(x, y, z)      for i = x to y
^                               z()
^                       endfor              | The definition

a(1, 100, func)                             | The invocation
</pre><p class="Paragraph">Macro definitions with the same name but with different
               numbers of arguments are regarded as different. For
               example:
            </p><pre class="CodeBlock">
#define x              definition without arguments
#define x()            definition with 0 arguments
#define x(arg1)        definition with 1 argument 
#define x(arg1,arg2)   definition with 2 arguments
#define x(...)         definition with at least one argument
</pre><p class="Paragraph">Note that there is a difference between a macro without
               arguments and a macro with zero arguments. In the first case,
               you must use 'x' in the program script to call the macro. In
               the second case, you must use 'x()' to call the macro.
            </p>
         </div>
         <div class="GeneralSection">
            <div class="subSectionTitle">Undefining macros</div>
            <p class="Paragraph">The '#undef' statement causes the macro definition to be
               ignored. The number of arguments in the '#undef' call must
               match the number of arguments in the definition. For
               example:
            </p><pre class="CodeBlock">
#define MAXLENGTH   1000
#define INCR        1
#define INCR(i)     i = i + INCR
...
#undef  MAXLENGTH
#define INCR        2       | Redefines INCR
...
#undef  INCR(i)
</pre><p class="Paragraph">An error occurs if you apply #undef to an unknown macro.
               To be sure that the macro was defined, use the following
               construction:
            </p><pre class="CodeBlock">
#ifdef INCR                 | without arguments
        #undef INCR(i)
#endif
</pre><p class="Paragraph">See <a href="../../progguide/3gl_features/conditional_compiling_preprocessor.htm" class="manualLink">Conditional compiling (preprocessor)</a> for a detailed description of #ifdef and #endif
               calls.
            </p>
         </div>
         <div class="GeneralSection">
            <div class="subSectionTitle">Variable macro arguments</div>
            <p class="Paragraph">You can use the ellipsis notation ( , ... ) to define the
               macro with a varying number of arguments. For example:
            </p><pre class="CodeBlock">
#define fillbuf(buf1, format, ...)  buf1 = sprintf$(format, ...)

| macro call
string buffer(100)
long l_val
double d_val

fillbuf(buffer, "%d. %s = %d %5.2f", 1, "Value", l_val, d_val)
</pre><p class="Paragraph">The macro definition can contain a number of arguments,
               but the ellipsis notation must be the last argument.
            </p>
         </div>
         <div class="RelatedTopics">
            <p class="RelatedTopicsSectionTitle">Related topics</p>
            <ul>
               <li class="RelTopic"><a href="../../progguide/3gl_features/overview.htm" class="manualLink">3GL programming language features: overview</a></li>
               <li class="RelTopic"><a href="../../progguide/3gl_features/preprocessor.htm" class="manualLink">Preprocessor</a></li>
            </ul>
         </div>
         <p>&nbsp;</p>
         <table class="noborder" border="0" cellpadding="0" cellspacing="5">
            <tr>
               <td class="noborder"><img src="../../skin/mail.gif" alt="Send Us Your Feedback About this Help Page"></td>
               <td class="noborder"><a class="FeedbackLink" href="mailto:documentation@infor.com?Subject=Feedback on /progguide/3gl_features/macro_definition_preprocessor, 10.4.2, en">Send Us Your Feedback About this Help Page</a></td>
            </tr>
         </table>
      </div>
   </body>
</html>